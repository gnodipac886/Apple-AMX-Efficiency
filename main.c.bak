#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include "amx.h"
#include "amx_imatmul.h"

#define NUM_XY_REG 2

int main() {
	amx_xy_8_reg_t * x_buf = (amx_xy_8_reg_t *)aligned_alloc(AMX_ALIGN_128, sizeof(amx_xy_8_reg_t));
	set_vector_u16((uint16_t *)x_buf, sizeof(amx_xy_reg_t), 2);
	set_vector_u16((uint16_t *)&(x_buf->reg[1]), sizeof(amx_xy_reg_t), 4);

	amx_z_reg_t * result = (amx_z_reg_t *)aligned_alloc(AMX_ALIGN_128, sizeof(amx_z_reg_t));

	AMX_SET();

	uint64_t ld_mask = LDXY_MULT_REG | (uint64_t)x_buf;
	AMX_LDX(ld_mask);
	AMX_LDY(ld_mask);

	uint64_t mac_mask =  MAC_16_Z_i32_i16;
	AMX_MAC16(mac_mask);

	mac_mask |= MAC_16_X_OFFSET(sizeof(amx_xy_reg_t)) | MAC_16_Y_OFFSET(sizeof(amx_xy_reg_t));
	printf("%llx\n", mac_mask);
	AMX_MAC16(mac_mask);

	// AMX_STX(STXY_MULT_REG | (uint64_t)result);
	// for (int i = 0; i < AMX_SIZE * 2; i++) {
	// 	printf("%d \n", ((uint16_t*)result)[i]);
	// }

	amx_get_z((uint32_t*)result, AMX_SIZE, AMX_SIZE);
	AMX_CLR();

	print_matrix((uint32_t*)result, AMX_SIZE, AMX_SIZE);
	free(x_buf);
	free(result);
	return 0;
}